import os
import json
from datetime import datetime, timezone, timedelta
from threading import Thread
from typing import List, Optional

import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, jsonify

from core.database import DatabaseManager
from core.language import LanguageManager
from config import Config

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix=Config.COMMAND_PREFIX, intents=intents)
db = DatabaseManager()
lang_manager = LanguageManager()

# --- Flask –¥–ª—è /healthz ---
app = Flask('')

@app.route('/')
def index():
    return jsonify({"status": "bot is running"}), 200

@app.route('/healthz')
def healthz():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()}), 200

def run_flask():
    app.run(host=Config.HOST, port=Config.PORT)

def keep_alive():
    Thread(target=run_flask, daemon=True).start()

# --- –ö–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
class AddParticipantsButton(discord.ui.Button):
    def __init__(self, contract_name: str, lang: str):
        super().__init__(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", style=discord.ButtonStyle.primary)
        self.contract_name = contract_name
        self.lang = lang

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            lang_manager.get_text("edit_participants_prompt", self.lang),
            ephemeral=True
        )

        def check(m: discord.Message):
            return m.author == interaction.user and m.channel == interaction.channel

        try:
            msg = await bot.wait_for('message', check=check, timeout=60)
            mentions = msg.mentions
            if not mentions:
                await interaction.followup.send(lang_manager.get_text("participants_empty", self.lang), ephemeral=True)
                return

            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ (–ø—Ä–æ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏ —É –∫–Ω–æ–ø–∫–∏, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
            # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—ç—à –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Å –Ω–æ–≤—ã–º –æ—Ç—á—ë—Ç–æ–º

            contract = db.get_contract_by_name(self.contract_name)
            if not contract:
                await interaction.followup.send(lang_manager.get_text("contract_not_found", self.lang), ephemeral=True)
                return

            temp_participants = [f"@{u.display_name}" for u in mentions]

            participants_text = "\n".join(f"‚Ä¢ {p}" for p in temp_participants)

            fund = contract["amount"] * Config.FUND_PERCENTAGE
            per_user = 0
            if temp_participants:
                per_user = (contract["amount"] - fund) / len(temp_participants)

            text = lang_manager.get_text("report_template", self.lang).format(
                name=contract["name"],
                amount=contract["amount"],
                leader=contract["author_name"],
                participants=participants_text,
                fund=f"{fund:.2f}",
                per_user=f"{per_user:.2f}"
            )
            await interaction.followup.send(text, ephemeral=True)

        except Exception:
            await interaction.followup.send(lang_manager.get_text("participants_empty", self.lang), ephemeral=True)

# --- View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ---
class ContractSelect(discord.ui.Select):
    def __init__(self, contracts: List[dict], lang: str, callback):
        options = [
            discord.SelectOption(label=c["name"], description=f'{c["amount"]} USD', value=c["name"])
            for c in contracts[:Config.MAX_CONTRACTS_DISPLAY]
        ]
        super().__init__(placeholder=lang_manager.get_text("select_contract", lang), options=options)
        self.callback_func = callback
        self.lang = lang

    async def callback(self, interaction: discord.Interaction):
        await self.callback_func(interaction, self.values[0], self.lang)

class ContractSelectView(discord.ui.View):
    def __init__(self, contracts: List[dict], lang: str, callback):
        super().__init__(timeout=120)
        self.add_item(ContractSelect(contracts, lang, callback))

# --- –ö–æ–º–∞–Ω–¥–∞ /language ---
@bot.tree.command(name="language", description="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
@app_commands.choices(language=[
    app_commands.Choice(name="–†—É—Å—Å–∫–∏–π", value="ru"),
    app_commands.Choice(name="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", value="ua"),
])
async def change_language(interaction: discord.Interaction, language: app_commands.Choice[str]):
    db.set_user_language(interaction.user.id, language.value)
    await interaction.response.send_message(
        lang_manager.get_text(f"language_set_{language.value}", language.value),
        ephemeral=True
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /addcontract ---
@bot.tree.command(name="addcontract", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", amount="–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
async def add_contract(interaction: discord.Interaction, name: str, amount: float):
    lang = db.get_user_language(interaction.user.id)
    if amount <= 0:
        await interaction.response.send_message(lang_manager.get_text("invalid_amount", lang), ephemeral=True)
        return

    contract = {
        "name": name,
        "amount": amount,
        "author_id": interaction.user.id,
        "author_name": interaction.user.display_name,
        "participants": [],
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

    db.add_contract(contract)
    await interaction.response.send_message(lang_manager.get_text("contract_added", lang).format(name=name, amount=amount))

# --- –ö–æ–º–∞–Ω–¥–∞ /editcontract ---
@bot.tree.command(name="editcontract", description="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", amount="–ù–æ–≤–∞—è —Å—É–º–º–∞")
async def edit_contract(interaction: discord.Interaction, name: str, amount: float):
    lang = db.get_user_language(interaction.user.id)
    contract = db.get_contract_by_name(name)
    if not contract:
        await interaction.response.send_message(lang_manager.get_text("contract_not_found", lang), ephemeral=True)
        return
    if contract["author_id"] != interaction.user.id:
        await interaction.response.send_message(lang_manager.get_text("no_permission", lang), ephemeral=True)
        return
    if amount <= 0:
        await interaction.response.send_message(lang_manager.get_text("invalid_amount", lang), ephemeral=True)
        return

    contract["amount"] = amount
    contract["timestamp"] = datetime.now(timezone.utc).isoformat()
    db.update_contract(contract)
    await interaction.response.send_message(lang_manager.get_text("contract_updated_success", lang).format(name=name, amount=amount))

# --- –ö–æ–º–∞–Ω–¥–∞ /deletecontract ---
@bot.tree.command(name="deletecontract", description="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
async def delete_contract(interaction: discord.Interaction, name: str):
    lang = db.get_user_language(interaction.user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç –∞–¥–º–∏–Ω)
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(lang_manager.get_text("no_permission", lang), ephemeral=True)
        return
    contract = db.get_contract_by_name(name)
    if not contract:
        await interaction.response.send_message(lang_manager.get_text("contract_not_found", lang), ephemeral=True)
        return
    db.delete_contract_by_name(name)
    await interaction.response.send_message(lang_manager.get_text("contract_deleted_success", lang).format(name=name))

# --- –ö–æ–º–∞–Ω–¥–∞ /report ---
@bot.tree.command(name="report", description="üìÑ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
async def report(interaction: discord.Interaction):
    lang = db.get_user_language(interaction.user.id)
    contracts = db.get_all_contracts()
    if not contracts:
        await interaction.response.send_message(lang_manager.get_text("no_contracts_found", lang), ephemeral=True)
        return

    async def on_select(inter: discord.Interaction, contract_name: str, lang: str):
        contract = db.get_contract_by_name(contract_name)
        if not contract:
            await inter.response.send_message(lang_manager.get_text("contract_not_found", lang), ephemeral=True)
            return

        participants = contract["participants"]
        participants_text = "\n".join(f"‚Ä¢ {p}" for p in participants) if participants else "-"

        fund = contract["amount"] * Config.FUND_PERCENTAGE
        per_user = 0
        if participants:
            per_user = (contract["amount"] - fund) / len(participants)

        text = lang_manager.get_text("report_template", lang).format(
            name=contract["name"],
            amount=contract["amount"],
            leader=contract["author_name"],
            participants=participants_text,
            fund=f"{fund:.2f}",
            per_user=f"{per_user:.2f}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        view = discord.ui.View()
        view.add_item(AddParticipantsButton(contract["name"], lang))
        await inter.response.edit_message(content=text, embed=None, view=view)

    view = ContractSelectView(contracts, lang, on_select)
    await interaction.response.send_message(lang_manager.get_text("select_contract", lang), view=view, ephemeral=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /sendreport ---
@bot.tree.command(name="sendreport", description="üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –±–∞–∑—É")
@app_commands.describe(contract_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
async def send_report(interaction: discord.Interaction, contract_name: str):
    lang = db.get_user_language(interaction.user.id)
    contract = db.get_contract_by_name(contract_name)
    if not contract:
        await interaction.response.send_message(lang_manager.get_text("contract_not_found", lang), ephemeral=True)
        return

    participants = contract["participants"]
    fund = contract["amount"] * Config.FUND_PERCENTAGE
    per_user = 0
    if participants:
        per_user = (contract["amount"] - fund) / len(participants)

    report = {
        "contract_name": contract["name"],
        "author_id": contract["author_id"],
        "author_name": contract["author_name"],
        "participants": participants,
        "amount": contract["amount"],
        "fund": fund,
        "per_user": per_user,
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

    db.save_report(report)
    await interaction.response.send_message(f"‚úÖ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É **{contract_name}** —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", ephemeral=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /reportdays ---
@bot.tree.command(name="reportdays", description="üìÖ –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏")
@app_commands.describe(days="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 30)")
async def report_days(interaction: discord.Interaction, days: int = Config.DEFAULT_REPORT_DAYS):
    lang = db.get_user_language(interaction.user.id)
    if days <= 0 or days > Config.MAX_REPORT_DAYS:
        await interaction.response.send_message(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {Config.MAX_REPORT_DAYS}.", ephemeral=True)
        return

    reports = db.get_reports_by_days(days)
    if not reports:
        await interaction.response.send_message(lang_manager.get_text("no_contracts_found", lang), ephemeral=True)
        return

    total_amount = sum(r["amount"] for r in reports)
    total_fund = sum(r["fund"] for r in reports)
    total_payout = sum(r["per_user"] * len(r["participants"]) for r in reports)

    # –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    earnings = {}
    for r in reports:
        for p in r["participants"]:
            earnings[p] = earnings.get(p, 0) + r["per_user"]

    earnings_text = "\n".join(f"‚Ä¢ {user}: {amount:.2f} USD" for user, amount in earnings.items())

    text = lang_manager.get_text("report_days_summary", lang).format(
        days=days,
        total=total_amount,
        fund=total_fund,
        payout=total_payout,
        earnings=earnings_text
    )
    await interaction.response.send_message(text, ephemeral=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /info ---
@bot.tree.command(name="info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö")
async def info(interaction: discord.Interaction):
    lang = db.get_user_language(interaction.user.id)
    text = (
        "üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/language - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ (üá∑üá∫/üá∫üá¶)\n"
        "/addcontract - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç\n"
        "/editcontract - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä)\n"
        "/deletecontract - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n"
        "/report - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É\n"
        "/sendreport - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –±–∞–∑—É\n"
        "/reportdays - —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–∞–º\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n\n"
        "–í –æ—Ç—á—ë—Ç–µ /report –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)."
    )
    await interaction.response.send_message(text, ephemeral=True)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    keep_alive()
    token = Config.DISCORD_BOT_TOKEN
    if not token:
        print("‚ùå DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        exit(1)
    bot.run(token)
