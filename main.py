import os
import json
from datetime import datetime, timezone, timedelta
from threading import Thread

import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, jsonify

from config import Config

# === DatabaseManager —Å SQLite ===
import sqlite3
from typing import Optional, List

class DatabaseManager:
    def __init__(self, db_path: str = "database.db"):
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        with self.conn:
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS contracts (
                    name TEXT PRIMARY KEY,
                    amount REAL,
                    author_id INTEGER,
                    author_name TEXT,
                    participants TEXT,
                    timestamp TEXT
                )
            """)
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    language TEXT
                )
            """)

    def add_contract(self, contract: dict):
        with self.conn:
            self.conn.execute("""
                INSERT OR REPLACE INTO contracts (name, amount, author_id, author_name, participants, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                contract["name"],
                contract["amount"],
                contract["author_id"],
                contract["author_name"],
                json.dumps(contract.get("participants", [])),
                contract["timestamp"]
            ))

    def get_contract_by_name(self, name: str) -> Optional[dict]:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM contracts WHERE name = ?", (name,))
        row = cur.fetchone()
        if row:
            return {
                "name": row[0],
                "amount": row[1],
                "author_id": row[2],
                "author_name": row[3],
                "participants": json.loads(row[4]) if row[4] else [],
                "timestamp": row[5]
            }
        return None

    def get_all_contracts(self) -> List[dict]:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM contracts")
        rows = cur.fetchall()
        return [
            {
                "name": row[0],
                "amount": row[1],
                "author_id": row[2],
                "author_name": row[3],
                "participants": json.loads(row[4]) if row[4] else [],
                "timestamp": row[5]
            }
            for row in rows
        ]

    def update_contract(self, contract: dict):
        with self.conn:
            self.conn.execute("""
                UPDATE contracts
                SET amount = ?, participants = ?, timestamp = ?
                WHERE name = ?
            """, (
                contract["amount"],
                json.dumps(contract.get("participants", [])),
                contract["timestamp"],
                contract["name"]
            ))

    def delete_contract_by_name(self, name: str):
        with self.conn:
            self.conn.execute("DELETE FROM contracts WHERE name = ?", (name,))

    def set_user_language(self, user_id: int, lang: str):
        with self.conn:
            self.conn.execute("""
                INSERT OR REPLACE INTO users (user_id, language)
                VALUES (?, ?)
            """, (user_id, lang))

    def get_user_language(self, user_id: int) -> str:
        cur = self.conn.cursor()
        cur.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else Config.DEFAULT_LANGUAGE

# === LanguageManager (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π, –±–µ–∑ —Ñ–∞–π–ª–æ–≤) ===
class LanguageManager:
    texts = {
        "ru": {
            "language_set_ru": "–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
            "language_set_ua": "–í—ã–±—Ä–∞–Ω —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫.",
            "select_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            "menu_title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "menu_description": "–£–ø—Ä–∞–≤–ª—è–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ.",
            "contract_added": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** –Ω–∞ —Å—É–º–º—É **{amount} USD** –¥–æ–±–∞–≤–ª–µ–Ω.",
            "invalid_amount": "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
            "contract_not_found": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            "contract_updated_success": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤–∞—è —Å—É–º–º–∞: **{amount} USD**.",
            "no_permission": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.",
            "contract_deleted_success": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
            "no_contracts_found": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            "select_contract": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
            "report_template": "**üìÑ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É \"{name}\"**\nüí∞ –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {amount} USD\nüë§ –°—Ç–∞—Ä—à–∏–π –≥—Ä—É–ø–ø—ã: @{leader}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}\nüè¶ –í —Ñ–æ–Ω–¥ —Å–µ–º—å–∏: {fund} USD (50%)\nüí∏ –ö–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: {per_user} USD",
        },
        "ua": {
            "language_set_ru": "–û–±—Ä–∞–Ω–æ —Ä–æ—Å—ñ–π—Å—å–∫—É –º–æ–≤—É.",
            "language_set_ua": "–û–±—Ä–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.",
            "select_language": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
            "menu_title": "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            "menu_description": "–ö–µ—Ä—É–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥ –Ω–∏–∂—á–µ.",
            "contract_added": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** –Ω–∞ —Å—É–º—É **{amount} USD** –¥–æ–¥–∞–Ω–æ.",
            "invalid_amount": "–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.",
            "contract_not_found": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            "contract_updated_success": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** –æ–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤–∞ —Å—É–º–∞: **{amount} USD**.",
            "no_permission": "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É.",
            "contract_deleted_success": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç **{name}** —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
            "no_contracts_found": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.",
            "select_contract": "–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑—ñ —Å–ø–∏—Å–∫—É:",
            "report_template": "**üìÑ –ó–≤—ñ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É \"{name}\"**\nüí∞ –°—É–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {amount} USD\nüë§ –°—Ç–∞—Ä—à–∏–π –≥—Ä—É–ø–∏: @{leader}\nüë• –£—á–∞—Å–Ω–∏–∫–∏:\n{participants}\nüè¶ –î–æ —Å—ñ–º–µ–π–Ω–æ–≥–æ —Ñ–æ–Ω–¥—É: {fund} USD (50%)\nüí∏ –ö–æ–∂–Ω–æ–º—É —É—á–∞—Å–Ω–∏–∫—É: {per_user} USD",
        }
    }

    def get_text(self, key: str, lang: str) -> str:
        return self.texts.get(lang, self.texts[Config.DEFAULT_LANGUAGE]).get(key, f"[{key}]")


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=Config.COMMAND_PREFIX, intents=intents)
db = DatabaseManager()
lang_manager = LanguageManager()

# === Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è /healthz ===
app = Flask('')

@app.route('/healthz')
def healthz():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()}), 200

def run_flask():
    app.run(host=Config.HOST, port=Config.PORT)

def keep_alive():
    Thread(target=run_flask, daemon=True).start()

# === –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ ===
@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω.")
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç ===
@bot.tree.command(name="addcontract", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", amount="–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
async def add_contract(interaction: discord.Interaction, name: str, amount: float):
    lang = db.get_user_language(interaction.user.id)
    if amount <= 0:
        await interaction.response.send_message(lang_manager.get_text("invalid_amount", lang), ephemeral=True)
        return

    contract = {
        "name": name,
        "amount": amount,
        "author_id": interaction.user.id,
        "author_name": interaction.user.display_name,
        "participants": [],
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

    db.add_contract(contract)
    await interaction.response.send_message(lang_manager.get_text("contract_added", lang).format(name=name, amount=amount))

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    keep_alive()
    token = Config.DISCORD_BOT_TOKEN
    if not token:
        print("‚ùå DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        exit(1)
    bot.run(token)
